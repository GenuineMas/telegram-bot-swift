// Telegram Bot SDK for Swift (unofficial).
// This file is autogenerated by API/generate_wrappers.rb script.

import Foundation
import SwiftyJSON

/// Represents a video to be sent.
///
/// - SeeAlso: <https://core.telegram.org/bots/api#inputmediavideo>

public struct InputMediaVideo: JsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: JSON

    /// Type of the result, must be video
    public var type_string: String {
        get { return json["type"].stringValue }
        set { json["type"].stringValue = newValue }
    }

    /// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More info on Sending Files Â»
    public var media: String {
        get { return json["media"].stringValue }
        set { json["media"].stringValue = newValue }
    }

    /// Optional. Caption of the video to be sent, 0-200 characters
    public var caption: String? {
        get { return json["caption"].string }
        set { json["caption"].string = newValue }
    }

    /// Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.
    public var parse_mode: String? {
        get { return json["parse_mode"].string }
        set { json["parse_mode"].string = newValue }
    }

    /// Optional. Video width
    public var width: Int? {
        get { return json["width"].int }
        set { json["width"].int = newValue }
    }

    /// Optional. Video height
    public var height: Int? {
        get { return json["height"].int }
        set { json["height"].int = newValue }
    }

    /// Optional. Video duration
    public var duration: Int? {
        get { return json["duration"].int }
        set { json["duration"].int = newValue }
    }

    /// Optional. Pass True, if the uploaded video is suitable for streaming
    public var supports_streaming: Bool? {
        get { return json["supports_streaming"].bool }
        set { json["supports_streaming"].bool = newValue }
    }

    public init(json: JSON = [:]) {
        self.json = json
    }
}
