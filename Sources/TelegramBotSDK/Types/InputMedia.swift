// Telegram Bot SDK for Swift (unofficial).
// This file is autogenerated by API/generate_wrappers.rb script.

import Foundation


/// This object represents the content of a media message to be sent. It should be one of
/// InputMediaPhoto
/// InputMediaVideo
///
/// - SeeAlso: <https://core.telegram.org/bots/api#inputmedia>

public enum InputMedia: Codable {
    case photo(InputMediaPhoto)
    case video(InputMediaVideo)
    case audio(InputMediaAudio)
    case document(InputMediaDocument)
    case animation(InputMediaAnimation)
    case unknown
    
    public init(from decoder: Decoder) throws {
        if let photo = try? decoder.singleValueContainer().decode(InputMediaPhoto.self) {
            self = .photo(photo)
            return
        }

        if let video = try? decoder.singleValueContainer().decode(InputMediaVideo.self) {
            self = .video(video)
            return
        }
        
        if let audio = try? decoder.singleValueContainer().decode(InputMediaAudio.self) {
            self = .audio(audio)
            return
        }
        
        if let document = try? decoder.singleValueContainer().decode(InputMediaDocument.self) {
            self = .document(document)
            return
        }
        
        if let animation = try? decoder.singleValueContainer().decode(InputMediaAnimation.self) {
            self = .animation(animation)
            return
        }
        
        self = .unknown
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .photo(photo):
            try container.encode(photo)
        case let .video(video):
            try container.encode(video)
        case let .audio(audio):
            try container.encode(audio)
        case let .document(document):
            try container.encode(document)
        case let .animation(animation):
            try container.encode(animation)
        default:
            fatalError("Unknown should not be used")
        }
    }
}
