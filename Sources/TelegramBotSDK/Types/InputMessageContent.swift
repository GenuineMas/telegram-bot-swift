// Telegram Bot SDK for Swift (unofficial).
// This file is autogenerated by API/generate_wrappers.rb script.

import Foundation


/// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
/// InputTextMessageContent
/// InputLocationMessageContent
/// InputVenueMessageContent
/// InputContactMessageContent
///
/// - SeeAlso: <https://core.telegram.org/bots/api#inputmessagecontent>

public enum InputMessageContent: Codable {
    case text(InputTextMessageContent)
    case location(InputLocationMessageContent)
    case venue(InputVenueMessageContent)
    case contact(InputContactMessageContent)
    case unknown
    
    public init(from decoder: Decoder) throws {
        if let text = try? decoder.singleValueContainer().decode(InputTextMessageContent.self) {
            self = .text(text)
            return
        }

        if let location = try? decoder.singleValueContainer().decode(InputLocationMessageContent.self) {
            self = .location(location)
            return
        }
        
        if let venue = try? decoder.singleValueContainer().decode(InputVenueMessageContent.self) {
            self = .venue(venue)
            return
        }
        
        if let contact = try? decoder.singleValueContainer().decode(InputContactMessageContent.self) {
            self = .contact(contact)
            return
        }
        
        self = .unknown
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .text(text):
            try container.encode(text)
        case let .location(location):
            try container.encode(location)
        case let .venue(venue):
            try container.encode(venue)
        case let .contact(contact):
            try container.encode(contact)
        default:
            fatalError("Unknown should not be used")
        }
    }
}
